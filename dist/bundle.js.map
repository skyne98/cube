{"version":3,"file":"bundle.js","sources":["webpack:///webpack/bootstrap f879e65bddd58a64606b","webpack:///./cube.coffee","webpack:///./lexer/lexer.coffee","webpack:///../node_modules/lex/lexer.js","webpack:///../node_modules/detect-indent/index.js","webpack:///./utils/span.coffee","webpack:///./testcode.txt"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f879e65bddd58a64606b","import { lex } from './lexer/lexer'\r\n\r\ncode = require './testcode.txt'\r\nconsole.log lex code\n\n\n// WEBPACK FOOTER //\n// ./cube.coffee","import Lexer from 'lex'\r\nimport * as detectIndent from 'detect-indent'\r\nimport { create_span } from './../utils/span.coffee'\r\n\r\nexport lex = (code) ->\r\n\tlexer = new Lexer\r\n\t#Indentation\r\n\tdetected_indent = detectIndent(code)\r\n\tif detected_indent.type == 'tab' || detected_indent.type == null\r\n\t\tthrow new Error 'Wrong indentation'\r\n\tspace_amount = detected_indent.amount\r\n\r\n\tindents = [0]\r\n\tlast_indent_level = 0\r\n\r\n\t#Current position\r\n\tposition = 0\r\n\trow = 1\r\n\tcolumn = 1\r\n\r\n\t#Drop newlines\r\n\tlexer.addRule /[\\n]/, (lexeme) ->\r\n\t\tcolumn = 1\r\n\t\trow += 1\r\n\t\tposition += 1\r\n\t\treturn\r\n\tlexer.addRule /[\\r]/, (lexeme) ->\r\n\t\tcolumn += 1\r\n\t\tposition += 1\r\n\t\treturn\r\n\r\n\tlexer.addRule /^ */gm, (lexeme) ->\r\n\t\tcurrent_indent_level = lexeme.length\r\n\t\tif current_indent_level % space_amount != 0\r\n\t\t\tthrow new Error 'Wrong indentation: Expected ' + space_amount + '*n spaces, but found ' + current_indent_level\r\n\t\tindent_difference = current_indent_level - last_indent_level\r\n\r\n\t\tindents_left = indent_difference\r\n\t\ttokens = []\r\n\r\n\t\tadd_samedent = indents.includes current_indent_level\r\n\r\n\t\twhile indents_left > 0\r\n\t\t\ttokens.push { type: 'indent', value: current_indent_level, span: create_span code, position, current_indent_level, row, column, row, column + current_indent_level }\r\n\t\t\tindents_left = indents_left - space_amount\r\n\t\t\tindents.push current_indent_level\r\n\t\twhile indents_left < 0\r\n\t\t\ttokens.push { type: 'dedent', span: create_span code, position, current_indent_level, row, column, row, column + current_indent_level }\r\n\t\t\tindents_left += space_amount\r\n\t\t\tindents.pop()\r\n\r\n\t\t#Samedent\r\n\t\tif add_samedent then tokens.push { type: 'sameden' }\r\n\r\n\t\tlast_indent_level = current_indent_level\r\n\r\n\t\t#Move position\r\n\t\tcolumn += current_indent_level\r\n\t\tposition += current_indent_level\r\n\r\n\t\treturn tokens\r\n\r\n\t#Whitespace\r\n\tlexer.addRule /[ ]+/, (lexeme) ->\r\n\t\tresult = {\r\n\t\t\ttype: 'whitespace'\r\n\t\t\tvalue: lexeme\r\n\t\t\tspan: create_span code, position, lexeme.length, row, column, row, column + lexeme.length\r\n\t\t}\r\n\t\tcolumn += lexeme.length\r\n\t\tposition += lexeme.length\r\n\t\treturn result\r\n\r\n\t#Strings\r\n\tlexer.addRule /\"[^\"\\\\\\r\\n]*(?:\\\\.[^\"\\\\\\r\\n]*)*\"/, (lexeme) ->\r\n\t\tresult = {\r\n\t\t\ttype: 'string'\r\n\t\t\tvalue: lexeme.splice(1, -1)\r\n\t\t\tspan: create_span code, position, lexeme.length, row, column, row, column + lexeme.length\r\n\t\t}\r\n\t\tcolumn += lexeme.splice(1, -1).length\r\n\t\tposition += lexeme.splice(1, -1).length\r\n\t\treturn result\r\n\tlexer.addRule /'[^'\\\\\\r\\n]*(?:\\\\.[^'\\\\\\r\\n]*)*'/, (lexeme) ->\r\n\t\tresult = {\r\n\t\t\ttype: 'string'\r\n\t\t\tvalue: lexeme.splice(1, -1)\r\n\t\t\tspan: create_span code, position, lexeme.length, row, column, row, column + lexeme.length\r\n\t\t}\r\n\t\tcolumn += lexeme.length\r\n\t\tposition += lexeme.length\r\n\t\treturn result\r\n\t#Numbers\r\n\tlexer.addRule /[\\+\\-]?\\d*\\.?\\d+(?:[Ee][\\+\\-]?\\d+)?/, (lexeme) ->\r\n\t\tresult = {\r\n\t\t\ttype: 'number'\r\n\t\t\tvalue: parseFloat lexeme\r\n\t\t\tspan: create_span code, position, lexeme.length, row, column, row, column + lexeme.length\r\n\t\t}\r\n\t\tcolumn += lexeme.length\r\n\t\tposition += lexeme.length\r\n\t\treturn result\r\n\t#Identifiers\r\n\tlexer.addRule /[$a-zA-Z_][0-9A-Za-z_$]*/i, (lexeme) ->\r\n\t\tresult = {\r\n\t\t\ttype: 'identifier'\r\n\t\t\tvalue: lexeme\r\n\t\t\tspan: create_span code, position, lexeme.length, row, column, row, column + lexeme.length\r\n\t\t}\r\n\t\tcolumn += lexeme.length\r\n\t\tposition += lexeme.length\r\n\t\treturn result\r\n\t#Parentheses\r\n\tlexer.addRule /\\(/, (lexeme) ->\r\n\t\tresult = {\r\n\t\t\ttype: 'paren_open'\r\n\t\t\tvalue: lexeme\r\n\t\t\tspan: create_span code, position, lexeme.length, row, column, row, column + lexeme.length\r\n\t\t}\r\n\t\tcolumn += lexeme.length\r\n\t\tposition += lexeme.length\r\n\t\treturn result\r\n\tlexer.addRule /\\)/, (lexeme) ->\r\n\t\tresult = {\r\n\t\t\ttype: 'paren_close'\r\n\t\t\tvalue: lexeme\r\n\t\t\tspan: create_span code, position, lexeme.length, row, column, row, column + lexeme.length\r\n\t\t}\r\n\t\tcolumn += lexeme.length\r\n\t\tposition += lexeme.length\r\n\t\treturn result\r\n\t#Brackets\r\n\tlexer.addRule /\\[/, (lexeme) ->\r\n\t\tresult = {\r\n\t\t\ttype: 'bra_open'\r\n\t\t\tvalue: lexeme\r\n\t\t\tspan: create_span code, position, lexeme.length, row, column, row, column + lexeme.length\r\n\t\t}\r\n\t\tcolumn += lexeme.length\r\n\t\tposition += lexeme.length\r\n\t\treturn result\r\n\tlexer.addRule /\\]/, (lexeme) ->\r\n\t\tresult = {\r\n\t\t\ttype: 'bra_close'\r\n\t\t\tvalue: lexeme\r\n\t\t\tspan: create_span code, position, lexeme.length, row, column, row, column + lexeme.length\r\n\t\t}\r\n\t\tcolumn += lexeme.length\r\n\t\tposition += lexeme.length\r\n\t\treturn result\r\n\t#Brackets\r\n\tlexer.addRule /\\[/, (lexeme) ->\r\n\t\tresult = {\r\n\t\t\ttype: 'square_open'\r\n\t\t\tvalue: lexeme\r\n\t\t\tspan: create_span code, position, lexeme.length, row, column, row, column + lexeme.length\r\n\t\t}\r\n\t\tcolumn += lexeme.length\r\n\t\tposition += lexeme.length\r\n\t\treturn result\r\n\tlexer.addRule /\\]/, (lexeme) ->\r\n\t\tresult = {\r\n\t\t\ttype: 'square_close'\r\n\t\t\tvalue: lexeme\r\n\t\t\tspan: create_span code, position, lexeme.length, row, column, row, column + lexeme.length\r\n\t\t}\r\n\t\tcolumn += lexeme.length\r\n\t\tposition += lexeme.length\r\n\t\treturn result\r\n\t#Braces\r\n\tlexer.addRule /\\{/, (lexeme) ->\r\n\t\tresult = {\r\n\t\t\ttype: 'curly_open'\r\n\t\t\tvalue: lexeme\r\n\t\t\tspan: create_span code, position, lexeme.length, row, column, row, column + lexeme.length\r\n\t\t}\r\n\t\tcolumn += lexeme.length\r\n\t\tposition += lexeme.length\r\n\t\treturn result\r\n\tlexer.addRule /\\}/, (lexeme) ->\r\n\t\tresult = {\r\n\t\t\ttype: 'curly_close'\r\n\t\t\tvalue: lexeme\r\n\t\t\tspan: create_span code, position, lexeme.length, row, column, row, column + lexeme.length\r\n\t\t}\r\n\t\tcolumn += lexeme.length\r\n\t\tposition += lexeme.length\r\n\t\treturn result\r\n\r\n\t#Operators\r\n\tlexer.addRule /[\\+\\-\\\\\\*/|><:;\\.]+/, (lexeme) ->\r\n\t\tresult = {\r\n\t\t\ttype: 'operator'\r\n\t\t\tvalue: lexeme\r\n\t\t\tspan: create_span code, position, lexeme.length, row, column, row, column + lexeme.length\r\n\t\t}\r\n\t\tcolumn += lexeme.length\r\n\t\tposition += lexeme.length\r\n\t\treturn result\r\n\r\n\tlexer.setInput(code)\r\n\r\n\ttokens = []\r\n\ttoken = lexer.lex()\r\n\twhile token\r\n\t\ttokens.push token\r\n\t\ttoken = lexer.lex()\r\n\r\n\t#Dedent the trailing indentations\r\n\twhile last_indent_level > 0\r\n\t\ttokens.push { type: 'dedent' }\r\n\t\tlast_indent_level -= space_amount\r\n\t\tindents.pop()\r\n\r\n\t#Remove the trailing samedents\r\n\ttokens.shift() while tokens[0] && tokens[0].type == 'samedent'\r\n\treturn tokens\r\n\n\n\n// WEBPACK FOOTER //\n// ./lexer/lexer.coffee","if (typeof module === \"object\" && typeof module.exports === \"object\") module.exports = Lexer;\n\nLexer.defunct = function (chr) {\n    throw new Error(\"Unexpected character at index \" + (this.index - 1) + \": \" + chr);\n};\n\nfunction Lexer(defunct) {\n    if (typeof defunct !== \"function\") defunct = Lexer.defunct;\n\n    var tokens = [];\n    var rules = [];\n    var remove = 0;\n    this.state = 0;\n    this.index = 0;\n    this.input = \"\";\n\n    this.addRule = function (pattern, action, start) {\n        var global = pattern.global;\n\n        if (!global) {\n            var flags = \"g\";\n            if (pattern.multiline) flags += \"m\";\n            if (pattern.ignoreCase) flags += \"i\";\n            pattern = new RegExp(pattern.source, flags);\n        }\n\n        if (Object.prototype.toString.call(start) !== \"[object Array]\") start = [0];\n\n        rules.push({\n            pattern: pattern,\n            global: global,\n            action: action,\n            start: start\n        });\n\n        return this;\n    };\n\n    this.setInput = function (input) {\n        remove = 0;\n        this.state = 0;\n        this.index = 0;\n        tokens.length = 0;\n        this.input = input;\n        return this;\n    };\n\n    this.lex = function () {\n        if (tokens.length) return tokens.shift();\n\n        this.reject = true;\n\n        while (this.index <= this.input.length) {\n            var matches = scan.call(this).splice(remove);\n            var index = this.index;\n\n            while (matches.length) {\n                if (this.reject) {\n                    var match = matches.shift();\n                    var result = match.result;\n                    var length = match.length;\n                    this.index += length;\n                    this.reject = false;\n                    remove++;\n\n                    var token = match.action.apply(this, result);\n                    if (this.reject) this.index = result.index;\n                    else if (typeof token !== \"undefined\") {\n                        switch (Object.prototype.toString.call(token)) {\n                        case \"[object Array]\":\n                            tokens = token.slice(1);\n                            token = token[0];\n                        default:\n                            if (length) remove = 0;\n                            return token;\n                        }\n                    }\n                } else break;\n            }\n\n            var input = this.input;\n\n            if (index < input.length) {\n                if (this.reject) {\n                    remove = 0;\n                    var token = defunct.call(this, input.charAt(this.index++));\n                    if (typeof token !== \"undefined\") {\n                        if (Object.prototype.toString.call(token) === \"[object Array]\") {\n                            tokens = token.slice(1);\n                            return token[0];\n                        } else return token;\n                    }\n                } else {\n                    if (this.index !== index) remove = 0;\n                    this.reject = true;\n                }\n            } else if (matches.length)\n                this.reject = true;\n            else break;\n        }\n    };\n\n    function scan() {\n        var matches = [];\n        var index = 0;\n\n        var state = this.state;\n        var lastIndex = this.index;\n        var input = this.input;\n\n        for (var i = 0, length = rules.length; i < length; i++) {\n            var rule = rules[i];\n            var start = rule.start;\n            var states = start.length;\n\n            if ((!states || start.indexOf(state) >= 0) ||\n                (state % 2 && states === 1 && !start[0])) {\n                var pattern = rule.pattern;\n                pattern.lastIndex = lastIndex;\n                var result = pattern.exec(input);\n\n                if (result && result.index === lastIndex) {\n                    var j = matches.push({\n                        result: result,\n                        action: rule.action,\n                        length: result[0].length\n                    });\n\n                    if (rule.global) index = j;\n\n                    while (--j > index) {\n                        var k = j - 1;\n\n                        if (matches[j].length > matches[k].length) {\n                            var temple = matches[j];\n                            matches[j] = matches[k];\n                            matches[k] = temple;\n                        }\n                    }\n                }\n            }\n        }\n\n        return matches;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/lex/lexer.js\n// module id = 2\n// module chunks = 0","'use strict';\n\n// detect either spaces or tabs but not both to properly handle tabs\n// for indentation and spaces for alignment\nconst INDENT_RE = /^(?:( )+|\\t+)/;\n\nfunction getMostUsed(indents) {\n\tlet result = 0;\n\tlet maxUsed = 0;\n\tlet maxWeight = 0;\n\n\tfor (const entry of indents) {\n\t\t// TODO: use destructuring when targeting Node.js 6\n\t\tconst key = entry[0];\n\t\tconst val = entry[1];\n\n\t\tconst u = val[0];\n\t\tconst w = val[1];\n\n\t\tif (u > maxUsed || (u === maxUsed && w > maxWeight)) {\n\t\t\tmaxUsed = u;\n\t\t\tmaxWeight = w;\n\t\t\tresult = Number(key);\n\t\t}\n\t}\n\n\treturn result;\n}\n\nmodule.exports = str => {\n\tif (typeof str !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// used to see if tabs or spaces are the most used\n\tlet tabs = 0;\n\tlet spaces = 0;\n\n\t// remember the size of previous line's indentation\n\tlet prev = 0;\n\n\t// remember how many indents/unindents as occurred for a given size\n\t// and how much lines follow a given indentation\n\t//\n\t// indents = {\n\t//    3: [1, 0],\n\t//    4: [1, 5],\n\t//    5: [1, 0],\n\t//   12: [1, 0],\n\t// }\n\tconst indents = new Map();\n\n\t// pointer to the array of last used indent\n\tlet current;\n\n\t// whether the last action was an indent (opposed to an unindent)\n\tlet isIndent;\n\n\tfor (const line of str.split(/\\n/g)) {\n\t\tif (!line) {\n\t\t\t// ignore empty lines\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet indent;\n\t\tconst matches = line.match(INDENT_RE);\n\n\t\tif (matches) {\n\t\t\tindent = matches[0].length;\n\n\t\t\tif (matches[1]) {\n\t\t\t\tspaces++;\n\t\t\t} else {\n\t\t\t\ttabs++;\n\t\t\t}\n\t\t} else {\n\t\t\tindent = 0;\n\t\t}\n\n\t\tconst diff = indent - prev;\n\t\tprev = indent;\n\n\t\tif (diff) {\n\t\t\t// an indent or unindent has been detected\n\n\t\t\tisIndent = diff > 0;\n\n\t\t\tcurrent = indents.get(isIndent ? diff : -diff);\n\n\t\t\tif (current) {\n\t\t\t\tcurrent[0]++;\n\t\t\t} else {\n\t\t\t\tcurrent = [1, 0];\n\t\t\t\tindents.set(diff, current);\n\t\t\t}\n\t\t} else if (current) {\n\t\t\t// if the last action was an indent, increment the weight\n\t\t\tcurrent[1] += Number(isIndent);\n\t\t}\n\t}\n\n\tconst amount = getMostUsed(indents);\n\n\tlet type;\n\tlet indent;\n\tif (!amount) {\n\t\ttype = null;\n\t\tindent = '';\n\t} else if (spaces >= tabs) {\n\t\ttype = 'space';\n\t\tindent = ' '.repeat(amount);\n\t} else {\n\t\ttype = 'tab';\n\t\tindent = '\\t'.repeat(amount);\n\t}\n\n\treturn {\n\t\tamount,\n\t\ttype,\n\t\tindent\n\t};\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/detect-indent/index.js\n// module id = 3\n// module chunks = 0","export create_span = (code, position, length, start_row, start_column, end_row, end_column) =>\r\n    return {\r\n        snippet: code.slice(position, position + length)\r\n        position: position\r\n        length: length\r\n        start_row: start_row\r\n        start_column: start_column\r\n        end_row: end_row\r\n        end_column: end_column\r\n    }\n\n\n// WEBPACK FOOTER //\n// ./utils/span.coffee","module.exports = \"define\\r\\n    sub\\r\\n    sub\\r\\n        sub2\\r\\ndefine\\r\\n    sub\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./testcode.txt\n// module id = 5\n// module chunks = 0"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;;;;;AC7DA;AAAA;AAAA;AACA;AADA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;;AAEA;AACA;AACA;;AACA;AAEA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAKA;AACA;AAAA;AACA;AACA;;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAHA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAHA;;AAMA;AAAA;AAAA;AAAA;;AAEA;;AAGA;AACA;AAEA;AA7BA;;AAgCA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AARA;;AAWA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AARA;AASA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AARA;;AAUA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AARA;;AAUA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AARA;;AAUA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AARA;AASA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AARA;;AAUA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AARA;AASA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AARA;;AAUA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AARA;AASA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AARA;;AAUA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AARA;AASA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AARA;;AAWA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AARA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAFA;;AAKA;AACA;AAAA;AAAA;AACA;AACA;AAHA;AAMA;;AAAA;AAAA;AACA;AApjzHA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AADA;;;;;;;;;;;;ACAA;;;A","sourceRoot":""}